// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from djinni_sqlite.djinni

#pragma once

#include "djinni_support.hpp"
#include "my_client_interface.hpp"

namespace djinni_generated {

class NativeMyClientInterface final : ::djinni::JniInterface<::djinni_sqlite::MyClientInterface, NativeMyClientInterface> {
public:
    using CppType = std::shared_ptr<::djinni_sqlite::MyClientInterface>;
    using CppOptType = std::shared_ptr<::djinni_sqlite::MyClientInterface>;
    using JniType = jobject;

    using Boxed = NativeMyClientInterface;

    ~NativeMyClientInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeMyClientInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeMyClientInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeMyClientInterface();
    friend ::djinni::JniClass<NativeMyClientInterface>;
    friend ::djinni::JniInterface<::djinni_sqlite::MyClientInterface, NativeMyClientInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::djinni_sqlite::MyClientInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        bool log_string(const std::string & str) override;

    private:
        friend ::djinni::JniInterface<::djinni_sqlite::MyClientInterface, ::djinni_generated::NativeMyClientInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("dyno/fun/djinni_sqlite/MyClientInterface") };
    const jmethodID method_logString { ::djinni::jniGetMethodID(clazz.get(), "logString", "(Ljava/lang/String;)Z") };
};

}  // namespace djinni_generated
